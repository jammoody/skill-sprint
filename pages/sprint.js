// pages/api/generate-sprint.js
export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  const { profile = {}, history = [], followup = null } = req.body || {};
  const passFromHeader = req.headers['x-ss-ai-passcode'] || '';
  const hasKey = !!process.env.OPENAI_API_KEY;
  const hasPassVar = !!process.env.SS_AI_PASSCODE;
  const passMatches = hasPassVar && String(passFromHeader) === String(process.env.SS_AI_PASSCODE);

  const mockDay = {
    title: 'Set 3 Monthly Goals',
    knowledge:
      'Clear, realistic goals create focus. Keep each one specific, measurable, and achievable in ~30 days.',
    task: 'Write three specific goals for the next month (with a metric).',
    reflection:
      'For each goal, is it specific, measurable, and realistic in 30 days? What’s the first 10-minute action?'
  };
  const mockTips = ['Add a metric to each goal.', 'Make the first step doable in 10 minutes.'];

  // --- MOCK mode if AI is off or passcode mismatch ---
  if (!hasKey || !passMatches) {
    return res.status(200).json({ mode: 'mock', day: mockDay, tips: mockTips });
  }

  // Helper: safely extract JSON from model output
  const extractJSON = (text = '') => {
    const cleaned = text.replace(/```(?:json)?/gi, '').trim();
    try { return JSON.parse(cleaned); } catch {}
    const s = cleaned.indexOf('{');
    const e = cleaned.lastIndexOf('}');
    if (s !== -1 && e !== -1 && e > s) {
      try { return JSON.parse(cleaned.slice(s, e + 1)); } catch {}
    }
    return null;
  };

  // FOLLOW-UP: after user saves goals, return concrete next steps
  if (followup && Array.isArray(followup.goals)) {
    const goals = followup.goals.filter(Boolean).slice(0, 3);
    try {
      const sys = `You are Skill Sprint, a pragmatic micro-coach.
Return JSON ONLY:
{"followupSteps":["short actionable step","short actionable step","short actionable step"]}`;
      const user = `User profile: ${JSON.stringify(profile)}
Recent history: ${JSON.stringify(history.slice(-5))}
User goals (next 30 days): ${JSON.stringify(goals)}
Constraints: Each step must take <= 10 minutes; be specific; include an example metric if relevant.`;

      const r = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          temperature: 0.3,
          max_tokens: 300,
          messages: [
            { role: 'system', content: sys },
            { role: 'user', content: user }
          ]
        })
      });

      const data = await r.json();
      const raw = data?.choices?.[0]?.message?.content || '';
      const parsed = extractJSON(raw);
      const steps = parsed?.followupSteps && Array.isArray(parsed.followupSteps)
        ? parsed.followupSteps.slice(0, 5)
        : [
            'Block a 10-minute slot tomorrow for Goal #1.',
            'Write 3 success criteria for Goal #1 (numbers if possible).',
            'Send one message to a colleague/customer to sanity-check Goal #1.'
          ];

      return res.status(200).json({ mode: 'ai', followupSteps: steps });
    } catch {
      return res.status(200).json({
        mode: 'ai',
        followupSteps: [
          'Draft the first 3 bullets for Goal #1.',
          'Schedule a 10-minute slot tomorrow for Goal #1.',
          'Define one simple metric to track progress.'
        ]
      });
    }
  }

  // DAILY SPRINT (personalised)
  try {
    const sys = `You are Skill Sprint, a business micro-coach.
Return JSON ONLY in this schema:
{"day":{"title":"","knowledge":"2-3 sentences","task":"1 actionable task","reflection":""},"tips":["",""]}

Rules:
- Reflection must clearly relate to today’s task (no generic lines).
- Be concrete; prefer numbers, examples, orle={{opacity:.7, fontSize:12, marginTop:12}}>
              {aiEnabled
                ? 'AI mode (dev): content is generated by the model.'
                : 'Mock mode: demo content for testing without API costs.'}
            </div>
          </aside>
        </div>
      )}
    </main>
  );
              }
